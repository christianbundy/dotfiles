#!/usr/bin/env node

const path = require("path");
const fs = require("fs");

// Constants
const sep = "/";
const wildcard = "*";
const not = "!";
const newline = "\n";
const ignoreAll = `${sep}*`;
const warning = `Warning: File is generated from .gitallow, do not edit.
<https://github.com/christianbundy/dotfiles/blob/master/.local/bin/gitallow>`;
const utf8 = "utf8";

// Paths
const gitallow = path.join(process.cwd(), ".gitallow");
const gitignore = path.join(process.cwd(), ".gitignore");

// Functions
const notEmpty = (x) => x.length > 0;
const unique = (item, index, array) => array.indexOf(item) === index;
const notNull = (x) => x !== null;
const comment = (s) => s.split(newline).map((s) => `# ${s}`);
const allow = (a) => [not, ...a].join(sep); // !/a
const deny = (a) => [, ...a, wildcard].join(sep); // /a/*

fs.writeFileSync(
  gitignore,
  [
    ...comment(warning),
    ignoreAll,
    ...fs
      .readFileSync(gitallow, utf8)
      .split(newline)
      .filter(notEmpty)
      .sort()
      .map((pathString) => [...pathString.split(sep).filter(notEmpty)])
      .map((pathParts) =>
        pathParts.reduce((acc, _, index, array) => {
          const fragment = array.slice(0, index + 1);

          return [
            ...acc,
            allow(fragment),
            index < pathParts.length - 1 ? deny(fragment) : null,
          ];
        }, [])
      )
      .flat()
      .filter(unique)
      .filter(notNull),
  ].join(newline)
);
